<?php
/**
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.
 * Licensed under the MIT License.  See License in the project root
 * for license information.
 */


namespace Microsoft\Graph\Core\Requests;

use League\Uri\Contracts\UriException;
use Microsoft\Kiota\Abstractions\RequestInformation;
use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamInterface;
use Ramsey\Uuid\Uuid;

/**
 * Class BatchRequestItem
 *
 * Individual request within a Batch Request
 *
 * @package Microsoft\Graph\Core
 * @copyright 2022 Microsoft Corporation
 * @license https://opensource.org/licenses/MIT MIT License
 * @link https://developer.microsoft.com/graph
 */
class BatchRequestItem implements Parsable
{
    /**
     * Unique identifier
     *
     * @var string
     */
    private string $id;

    /**
     * HTTP Method
     *
     * @var string
     */
    private string $method;

    /**
     * Relative request URL e.g. /users
     *
     * @var string
     */
    private string $url;

    /**
     * Request headers. Should contain content-type based on type of $body
     * e.g. JSON - application/json, Text - text/plain
     *
     * @var array<string, string>
     */
    private array $headers = [];

    /**
     *
     * @var StreamInterface|null
     */
    private ?StreamInterface $body = null;

    /**
     * Must NOT be identical to any request's $id.
     * Requests with same atomicityGroup are processed atomically - all fail or all succeed
     *
     * @var string|null
     */
    private ?string $atomicityGroup = null;

    /**
     * List of requests IDs or BatchRequestItems. Request executes only if dependent requests were successful.
     * If depends on a request with a different $atomicityGroup, then $atomicityGroup should be included here.
     *
     * @var array<string|BatchRequestItem>|null
     */
    private ?array $dependsOn = null;

    /**
     * Condition for executing. Value is a URL expression e.g
     * '$[another-request-id]/$succeeded' => executes if referenced request succeeds
     * '$[request-id]' to reference response body of referenced request
     * '$[request-id]/[path]' to reference part of the referenced request's response body
     * For more info see https://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_BatchRequest
     *
     * @var string|null
     */
    private ?string $if = null;

    /**
     * @param RequestInformation $requestInformation. Fluent Request Builder paths have create[Get|Put|Post|Delete|Patch]RequestInformation functions
     * @param string $id. Auto-generated by default.
     * @param array<string|BatchRequestItem>|null $dependsOn List of requests this request depends on
     * @param string|null $atomicityGroup
     * @throws UriException
     */
    public function __construct(RequestInformation $requestInformation, string $id = "", ?array $dependsOn = null, ?string $atomicityGroup = null)
    {
        if (!$requestInformation->httpMethod) {
            throw new \InvalidArgumentException("HTTP method cannot be NULL/empty");
        }
        $this->id = ($id) ?: Uuid::uuid4();
        $this->method = $requestInformation->httpMethod;
        $this->setUrl($requestInformation->getUri());
        $this->headers = $requestInformation->headers;
        $this->body = $requestInformation->content;
        $this->dependsOn($dependsOn);
        $this->atomicityGroup = $atomicityGroup;
    }

    /**
     * @param RequestInterface $psrRequest. MUST contain URL and HTTP method
     * @param string $id Auto-generated by default.
     * @param array<BatchRequestItem>|null $dependsOn List of requests this request depends on
     * @param string|null $atomicityGroup @see $atomicityGroup
     * @return BatchRequestItem
     * @throws UriException
     */
    public static function createWithPsrRequest(RequestInterface $psrRequest, string $id = "", ?array $dependsOn = null, ?string $atomicityGroup = null): BatchRequestItem
    {
        $requestInfo = new RequestInformation();
        $requestInfo->httpMethod = $psrRequest->getMethod();
        $requestInfo->setUri($psrRequest->getUri());
        foreach ($psrRequest->getHeaders() as $key => $value) {
            $requestInfo->headers[strtolower($key)] = strtolower(implode(",", $value));
        }
        $requestInfo->content = $psrRequest->getBody();
        return new BatchRequestItem($requestInfo, $id, $dependsOn, $atomicityGroup);
    }

    /**
     * Create dependency between Batch Request Items
     *
     * @param BatchRequestItem[]|string[]|null $requests list of request IDs or BatchRequestItems
     */
    public function dependsOn(?array $requests)
    {
        if ($requests) {
            foreach ($requests as $request) {
                if (is_a($request, BatchRequestItem::class)) {
                    $this->dependsOn [] = ($request->getAtomicityGroup() != $this->atomicityGroup) ?
                        $request->getAtomicityGroup() : $request->getId();
                } else {
                    $this->dependsOn [] = $request;
                }
            }
        }
    }

    /**
     * @param string $url
     */
    public function setUrl(string $url): void
    {
        // Set relative URL
        $urlParts = parse_url($url);
        if (!$urlParts || !array_key_exists('path', $urlParts)) {
            throw new \InvalidArgumentException("Invalid URL {$url}");
        }
        // Set relative URL
        $this->url = "{$urlParts['path']}";
        $this->url .= (array_key_exists('query', $urlParts)) ? "?{$urlParts['query']}" : '';
        $this->url .= (array_key_exists('fragment', $urlParts)) ? "#{$urlParts['fragment']}" : '';
    }

    /**
     * @return string
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @param string $id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * @return string
     */
    public function getMethod(): string
    {
        return $this->method;
    }

    /**
     * @param string $method
     */
    public function setMethod(string $method): void
    {
        $this->method = $method;
    }

    /**
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * @return string[]
     */
    public function getHeaders(): array
    {
        return $this->headers;
    }

    /**
     * @param string[] $headers
     */
    public function setHeaders(array $headers): void
    {
        $this->headers = $headers;
    }

    /**
     * @return StreamInterface|null
     */
    public function getBody(): ?StreamInterface
    {
        return $this->body;
    }

    /**
     * @param StreamInterface|null $body
     */
    public function setBody(?StreamInterface $body): void
    {
        $this->body = $body;
    }

    /**
     * @return string|null
     */
    public function getAtomicityGroup(): ?string
    {
        return $this->atomicityGroup;
    }

    /**
     * @param string|null $atomicityGroup
     */
    public function setAtomicityGroup(?string $atomicityGroup): void
    {
        $this->atomicityGroup = $atomicityGroup;
    }

    /**
     * @return BatchRequestItem[]|null
     */
    public function getDependsOn(): ?array
    {
        return $this->dependsOn;
    }

    /**
     * @return string|null
     */
    public function getIf(): ?string
    {
        return $this->if;
    }

    /**
     * @param string|null $if
     */
    public function setIf(?string $if): void
    {
        $this->if = $if;
    }

    public function getFieldDeserializers(): array
    {
        return [];
    }

    public function serialize(SerializationWriter $writer): void
    {
        $writer->writeStringValue('id', $this->getId());
        $writer->writeStringValue('method', $this->getMethod());
        $writer->writeStringValue('url', $this->getUrl());
        $writer->writeStringValue('atomicityGroup', $this->getAtomicityGroup());
        $writer->writeCollectionOfPrimitiveValues('dependsOn', $this->getDependsOn());
        $writer->writeStringValue('if', $this->getIf());
        $writer->writeAnyValue('headers', $this->getHeaders());
        $writer->writeStringValue('body', ($this->getBody()) ? urlencode($this->getBody()->getContents()) : null);
    }
}
